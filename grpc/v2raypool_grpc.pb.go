// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: v2raypool.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxyPoolService_GetProxyNodes_FullMethodName         = "/v2raypool.ProxyPoolService/GetProxyNodes"
	ProxyPoolService_GetProxyNodesByDomain_FullMethodName = "/v2raypool.ProxyPoolService/GetProxyNodesByDomain"
	ProxyPoolService_SetTestUrl_FullMethodName            = "/v2raypool.ProxyPoolService/SetTestUrl"
	ProxyPoolService_StartProxyPoolAll_FullMethodName     = "/v2raypool.ProxyPoolService/StartProxyPoolAll"
	ProxyPoolService_StopProxyPoolAll_FullMethodName      = "/v2raypool.ProxyPoolService/StopProxyPoolAll"
	ProxyPoolService_TestProxyPoolAll_FullMethodName      = "/v2raypool.ProxyPoolService/TestProxyPoolAll"
	ProxyPoolService_TestProxyPoolAllForce_FullMethodName = "/v2raypool.ProxyPoolService/TestProxyPoolAllForce"
	ProxyPoolService_KillAllNodes_FullMethodName          = "/v2raypool.ProxyPoolService/KillAllNodes"
	ProxyPoolService_ActiveProxyNode_FullMethodName       = "/v2raypool.ProxyPoolService/ActiveProxyNode"
	ProxyPoolService_UpdateProxySubscribe_FullMethodName  = "/v2raypool.ProxyPoolService/UpdateProxySubscribe"
)

// ProxyPoolServiceClient is the client API for ProxyPoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyPoolServiceClient interface {
	GetProxyNodes(ctx context.Context, in *ProxyNode, opts ...grpc.CallOption) (*ProxyNodes, error)
	GetProxyNodesByDomain(ctx context.Context, in *OptRequestDomain, opts ...grpc.CallOption) (*ProxyNodes, error)
	SetTestUrl(ctx context.Context, in *OptRequestUrl, opts ...grpc.CallOption) (*OptResult, error)
	StartProxyPoolAll(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error)
	StopProxyPoolAll(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error)
	TestProxyPoolAll(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error)
	TestProxyPoolAllForce(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error)
	KillAllNodes(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*KillNodesResult, error)
	ActiveProxyNode(ctx context.Context, in *ProxyNode, opts ...grpc.CallOption) (*OptResult, error)
	UpdateProxySubscribe(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*UpdateSubscribeResult, error)
}

type proxyPoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyPoolServiceClient(cc grpc.ClientConnInterface) ProxyPoolServiceClient {
	return &proxyPoolServiceClient{cc}
}

func (c *proxyPoolServiceClient) GetProxyNodes(ctx context.Context, in *ProxyNode, opts ...grpc.CallOption) (*ProxyNodes, error) {
	out := new(ProxyNodes)
	err := c.cc.Invoke(ctx, ProxyPoolService_GetProxyNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) GetProxyNodesByDomain(ctx context.Context, in *OptRequestDomain, opts ...grpc.CallOption) (*ProxyNodes, error) {
	out := new(ProxyNodes)
	err := c.cc.Invoke(ctx, ProxyPoolService_GetProxyNodesByDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) SetTestUrl(ctx context.Context, in *OptRequestUrl, opts ...grpc.CallOption) (*OptResult, error) {
	out := new(OptResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_SetTestUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) StartProxyPoolAll(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error) {
	out := new(OptResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_StartProxyPoolAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) StopProxyPoolAll(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error) {
	out := new(OptResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_StopProxyPoolAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) TestProxyPoolAll(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error) {
	out := new(OptResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_TestProxyPoolAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) TestProxyPoolAllForce(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*OptResult, error) {
	out := new(OptResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_TestProxyPoolAllForce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) KillAllNodes(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*KillNodesResult, error) {
	out := new(KillNodesResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_KillAllNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) ActiveProxyNode(ctx context.Context, in *ProxyNode, opts ...grpc.CallOption) (*OptResult, error) {
	out := new(OptResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_ActiveProxyNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyPoolServiceClient) UpdateProxySubscribe(ctx context.Context, in *OptRequest, opts ...grpc.CallOption) (*UpdateSubscribeResult, error) {
	out := new(UpdateSubscribeResult)
	err := c.cc.Invoke(ctx, ProxyPoolService_UpdateProxySubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyPoolServiceServer is the server API for ProxyPoolService service.
// All implementations must embed UnimplementedProxyPoolServiceServer
// for forward compatibility
type ProxyPoolServiceServer interface {
	GetProxyNodes(context.Context, *ProxyNode) (*ProxyNodes, error)
	GetProxyNodesByDomain(context.Context, *OptRequestDomain) (*ProxyNodes, error)
	SetTestUrl(context.Context, *OptRequestUrl) (*OptResult, error)
	StartProxyPoolAll(context.Context, *OptRequest) (*OptResult, error)
	StopProxyPoolAll(context.Context, *OptRequest) (*OptResult, error)
	TestProxyPoolAll(context.Context, *OptRequest) (*OptResult, error)
	TestProxyPoolAllForce(context.Context, *OptRequest) (*OptResult, error)
	KillAllNodes(context.Context, *OptRequest) (*KillNodesResult, error)
	ActiveProxyNode(context.Context, *ProxyNode) (*OptResult, error)
	UpdateProxySubscribe(context.Context, *OptRequest) (*UpdateSubscribeResult, error)
	mustEmbedUnimplementedProxyPoolServiceServer()
}

// UnimplementedProxyPoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyPoolServiceServer struct {
}

func (UnimplementedProxyPoolServiceServer) GetProxyNodes(context.Context, *ProxyNode) (*ProxyNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxyNodes not implemented")
}
func (UnimplementedProxyPoolServiceServer) GetProxyNodesByDomain(context.Context, *OptRequestDomain) (*ProxyNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxyNodesByDomain not implemented")
}
func (UnimplementedProxyPoolServiceServer) SetTestUrl(context.Context, *OptRequestUrl) (*OptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTestUrl not implemented")
}
func (UnimplementedProxyPoolServiceServer) StartProxyPoolAll(context.Context, *OptRequest) (*OptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProxyPoolAll not implemented")
}
func (UnimplementedProxyPoolServiceServer) StopProxyPoolAll(context.Context, *OptRequest) (*OptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProxyPoolAll not implemented")
}
func (UnimplementedProxyPoolServiceServer) TestProxyPoolAll(context.Context, *OptRequest) (*OptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestProxyPoolAll not implemented")
}
func (UnimplementedProxyPoolServiceServer) TestProxyPoolAllForce(context.Context, *OptRequest) (*OptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestProxyPoolAllForce not implemented")
}
func (UnimplementedProxyPoolServiceServer) KillAllNodes(context.Context, *OptRequest) (*KillNodesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAllNodes not implemented")
}
func (UnimplementedProxyPoolServiceServer) ActiveProxyNode(context.Context, *ProxyNode) (*OptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveProxyNode not implemented")
}
func (UnimplementedProxyPoolServiceServer) UpdateProxySubscribe(context.Context, *OptRequest) (*UpdateSubscribeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProxySubscribe not implemented")
}
func (UnimplementedProxyPoolServiceServer) mustEmbedUnimplementedProxyPoolServiceServer() {}

// UnsafeProxyPoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyPoolServiceServer will
// result in compilation errors.
type UnsafeProxyPoolServiceServer interface {
	mustEmbedUnimplementedProxyPoolServiceServer()
}

func RegisterProxyPoolServiceServer(s grpc.ServiceRegistrar, srv ProxyPoolServiceServer) {
	s.RegisterService(&ProxyPoolService_ServiceDesc, srv)
}

func _ProxyPoolService_GetProxyNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).GetProxyNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_GetProxyNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).GetProxyNodes(ctx, req.(*ProxyNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_GetProxyNodesByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequestDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).GetProxyNodesByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_GetProxyNodesByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).GetProxyNodesByDomain(ctx, req.(*OptRequestDomain))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_SetTestUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequestUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).SetTestUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_SetTestUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).SetTestUrl(ctx, req.(*OptRequestUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_StartProxyPoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).StartProxyPoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_StartProxyPoolAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).StartProxyPoolAll(ctx, req.(*OptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_StopProxyPoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).StopProxyPoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_StopProxyPoolAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).StopProxyPoolAll(ctx, req.(*OptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_TestProxyPoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).TestProxyPoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_TestProxyPoolAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).TestProxyPoolAll(ctx, req.(*OptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_TestProxyPoolAllForce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).TestProxyPoolAllForce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_TestProxyPoolAllForce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).TestProxyPoolAllForce(ctx, req.(*OptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_KillAllNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).KillAllNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_KillAllNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).KillAllNodes(ctx, req.(*OptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_ActiveProxyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).ActiveProxyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_ActiveProxyNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).ActiveProxyNode(ctx, req.(*ProxyNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyPoolService_UpdateProxySubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyPoolServiceServer).UpdateProxySubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyPoolService_UpdateProxySubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyPoolServiceServer).UpdateProxySubscribe(ctx, req.(*OptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyPoolService_ServiceDesc is the grpc.ServiceDesc for ProxyPoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyPoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2raypool.ProxyPoolService",
	HandlerType: (*ProxyPoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProxyNodes",
			Handler:    _ProxyPoolService_GetProxyNodes_Handler,
		},
		{
			MethodName: "GetProxyNodesByDomain",
			Handler:    _ProxyPoolService_GetProxyNodesByDomain_Handler,
		},
		{
			MethodName: "SetTestUrl",
			Handler:    _ProxyPoolService_SetTestUrl_Handler,
		},
		{
			MethodName: "StartProxyPoolAll",
			Handler:    _ProxyPoolService_StartProxyPoolAll_Handler,
		},
		{
			MethodName: "StopProxyPoolAll",
			Handler:    _ProxyPoolService_StopProxyPoolAll_Handler,
		},
		{
			MethodName: "TestProxyPoolAll",
			Handler:    _ProxyPoolService_TestProxyPoolAll_Handler,
		},
		{
			MethodName: "TestProxyPoolAllForce",
			Handler:    _ProxyPoolService_TestProxyPoolAllForce_Handler,
		},
		{
			MethodName: "KillAllNodes",
			Handler:    _ProxyPoolService_KillAllNodes_Handler,
		},
		{
			MethodName: "ActiveProxyNode",
			Handler:    _ProxyPoolService_ActiveProxyNode_Handler,
		},
		{
			MethodName: "UpdateProxySubscribe",
			Handler:    _ProxyPoolService_UpdateProxySubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2raypool.proto",
}
